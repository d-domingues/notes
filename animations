// simple fade-in/fade-out
 animations: [
    trigger('fade', [
      transition(':enter', [style({ opacity: 0, transform: 'translateY(5px)' }), animate(500)]),
      transition(':leave', animate(500, style({ opacity: 0 }))),
    ]),
  ],

// fade page transitions
@Component({
  selector: 'dashboard',
  animations: [
    trigger('routerAnimation', [
      transition('* <=> *', [
        // TO (styles)
        query(
          ':enter, :leave',
          style({
            position: 'absolute',
            left: 0,
            top: 0,
            width: '100%',
          }),
          { optional: true }
        ),
        query(':enter', style({ opacity: 0, transform: 'scale(0.8)' }), { optional: true }),
        // FROM (styles) with an animation
        group([
          query(':leave', animate('0.8s ease-out', style({ opacity: 0, transform: 'scale(0.8)' })), {
            optional: true,
          }),
          query(':enter', animate('0.8s ease-out', style({ opacity: 1, transform: 'scale(1)' })), { optional: true }),
        ]),
      ]),
    ]),
  ],
  template: `
    <div [@routerAnimation]="outlet?.activatedRouteData">
      <router-outlet #outlet="outlet"></router-outlet>
    </div>
  `,
})
export class DashboardPage {}

// slide page transitions
export const slider = trigger('routeAnimations', [
  transition('* => 1', slideTo('left')),
  transition('* => 4', slideTo('right')),
  transition('4 => 3, 4 => 2, 3 => 2', slideTo('left')),
  transition('1 => 2, 1 => 3, 2 => 3', slideTo('right')),
]);

function slideTo(direction) {
  return [
    query(
      ':enter, :leave',
      [
        style({
          position: 'absolute',
          top: 0,
          [direction]: 0,
          width: '100%',
        }),
      ],
      { optional: true }
    ),
    query(':enter', [style({ [direction]: '-100%' })]),
    // to animate simultaniously both components
    group([
      query(':leave', [animate('600ms ease', style({ [direction]: '100%' }))], {
        optional: true,
      }),
      query(':enter', [animate('600ms ease', style({ [direction]: '0%' }))]),
    ]),
    // Normalize the page style... Might not be necessary

    // Required only if you have child animations on the page
    // query(':leave', animateChild()),
    // query(':enter', animateChild()),
  ];
}


// card-flip
@Component({
  selector: 'flip-card',
  template: `
    <div class="card-wrapper" (click)="cardFlipped = !cardFlipped" [@cardFlip]="cardFlipped">
      <div class="face front">FRONT</div>
      <div class="face back">BACK</div>
    </div>
  `,
  styles: [
    `
      :host {
        display: block;
        perspective: 600px;
      }
    
      .card-wrapper {
        transform-style: preserve-3d;
      }

      .face {
        position: absolute;
        height: 100%;
        backface-visibility: hidden;
      }

      .front {
        transform: rotateY(180deg);
      }
    `,
  ],
  animations: [
    trigger('cardFlip', [
      state('false', style({ transform: 'none' })),
      state('true', style({ transform: 'rotateY(180deg)' })),
      transition('false => true', animate('600ms ease-out')),
      transition('true => false', animate('600ms ease-out')),
    ]),
  ],
})
export class FlipCard {
  cardFlipped = false;
}
